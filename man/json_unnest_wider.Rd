% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flatten.R
\name{json_unnest_wider}
\alias{json_unnest_wider}
\title{Unnest a JSON object into columns}
\usage{
json_unnest_wider(
  data,
  col,
  path = NULL,
  ptype = list(),
  names_sort = FALSE,
  names_sep = NULL,
  names_repair = "check_unique",
  wrap_scalars = FALSE
)
}
\arguments{
\item{data}{A data frame.}

\item{col}{JSON-column of objects to extract components from.}

\item{path}{Path where to extract from.}

\item{ptype}{Output type. If \code{NULL}, the default, the output type is
determined by computing the common type across all elements of \code{...}.}

\item{names_sort}{Should the extracted columns be sorted by name? If \code{FALSE},
the default, the columns are sorted by appearance.}

\item{names_sep}{If \code{NULL}, the default, the keys of the objects in \code{col}
are used as the column names. If a character it is used to join \code{col} and
the object keys.}

\item{names_repair}{What happens if the output has invalid column names?}

\item{wrap_scalars}{Should scalars be wrapped?}
}
\description{
Unnest a JSON object into columns
}
\examples{
# turn all components of item into columns with json_unnest_wider()
tibble(
  id = 1:2,
  x = c(
    '{"name": "Peter", "age": 19}',
    '{"age": 37}'
  )
) \%>\%
  json_unnest_wider(x)

tibble(
  id = 1:2,
  x = c(
    '{"name": "Peter", "age": 19, "purchase_ids": [1, 2]}',
    '{"age": 37, "purchase_ids": []}'
  )
) \%>\%
  json_unnest_wider(
    x,
    ptype = list(
      age = integer(),
      name = character(),
      purchase_id = new_json_array()
    ),
    names_sort = TRUE
  )
}
