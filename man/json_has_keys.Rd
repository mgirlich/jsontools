% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/keys.R
\name{json_has_keys}
\alias{json_has_keys}
\alias{json_has_key}
\alias{json_has_all_keys}
\alias{json_has_any_keys}
\alias{json_has_key1}
\alias{json_has_keys1}
\alias{json_has_all_keys1}
\alias{json_has_any_keys1}
\title{Does key exists?}
\usage{
json_has_keys(x, keys)

json_has_key(x, key)

json_has_all_keys(x, keys)

json_has_any_keys(x, keys)

json_has_key1(x, key)

json_has_keys1(x, keys)

json_has_all_keys1(x, keys)

json_has_any_keys1(x, keys)
}
\description{
Postgres
\itemize{
\item single string: '{"a":1, "b":2}'::jsonb ? 'b'
\item multiple strings (and): '{"a":1, "b":2, "c":3}'::jsonb ?| array\link{'b', 'c'}
\item multiple strings (or): '{"a":1, "b":2, "c":3}'::jsonb ?| array\link{'b', 'c'}
}
}
\details{
jq
\itemize{
\item single string: jq '{"a":1, "b":2}' | 'has("b")'
\item multiple strings (and): combine single strings with all OR
\item multiple strings (or): combine single strings with any
}
}
\examples{
json_has_key(x, "b")

json_has_keys(x, c("a", "b"))
json_has_all_keys(x, c("a", "b"))
json_has_any_keys(x, c("a", "b"))

json_has_key1(x1, "b")

json_has_keys1(x1, c("a", "b"))
json_has_all_keys1(x1, c("a", "b"))
json_has_any_keys1(x1, c("a", "b"))
}
